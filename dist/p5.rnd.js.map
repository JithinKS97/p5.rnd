{"version":3,"sources":["p5.dbox.js","p5.rnd.js"],"names":["DBox","x","y","s","drawInside","mousePressedInside","mousePressedOutside","fill","_renderer","elt","removeEventListener","mousePressed","mouseReleased","e","key","setIsAnyBeingDragged","isMouseInsideBox","canBeDragged","isBeingDragged","rectMode","CENTER","stroke","push","translate","drawContentInside","drawBox","pop","isVisible","noFill","strokeWeight","square","mouseX","pmouseX","isConstrained","mouseY","pmouseY","isPtInside","addEventListener","isAnyBeingDragged","isActive","isAnyDragging","RndBox","dBox","setVisible","rBox","dBoxMousePressedInside","dBoxMousePressedOutside","setConstraint","dragCalled","resizeCalled","display","dragDBox","dragRBox","drag","setPos","setSideLength","clearEventListeners","p5","prototype"],"mappings":";AAsJG,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtJkBA,IAAAA,EAAAA,WAShB,SAAA,EAAA,GAAA,IAAA,EAAA,KAPDC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,mBAAAA,OAAqB,IAAA,EAAA,aAGpB,EAFDC,EAAAA,EAAAA,oBAAAA,OAAsB,IAAA,EAAA,aAErB,EADDC,EAAAA,EAAAA,KACC,EAAA,KAAA,GA2BmB,EAAA,KAAA,sBAAA,WACpBC,UAAUC,IAAIC,oBAAoB,YAAa,EAAKC,cACpDH,UAAUC,IAAIC,oBAAoB,UAAW,EAAKE,iBAGvC,EAAA,KAAA,aAAA,SAACC,GACE,WAAVA,EAAEC,KACJd,EAAKe,sBAAqB,KAIf,EAAA,KAAA,eAAA,WACT,GAAA,EAAKC,mBAAoB,CAEvB,GADJ,EAAKX,sBACAL,EAAKiB,eACR,OAEF,EAAKC,gBAAiB,OAEtB,EAAKZ,wBAIO,EAAA,KAAA,gBAAA,WACd,EAAKY,gBAAiB,EACtBlB,EAAKe,sBAAqB,KAGlB,EAAA,KAAA,UAAA,WACRI,SAASC,QACTC,OAAO,KACPC,OACAC,UAAU,EAAKtB,EAAG,EAAKC,GACvB,EAAKsB,oBACL,EAAKC,UACLC,QAGQ,EAAA,KAAA,UAAA,WACJ,EAAKC,YACH,EAAKpB,KACPA,KAAK,EAAKA,MAEVqB,SAEFC,aAAa,GACbC,OAAO,EAAG,EAAG,EAAK3B,MAYf,EAAA,KAAA,OAAA,WACD,EAAKe,iBACP,EAAKjB,GAAK8B,OAASC,QACf,EAAKC,cACP,EAAK/B,GAAK6B,OAASC,QAEnB,EAAK9B,GAAKgC,OAASC,WAKN,EAAA,KAAA,mBAAA,WACV,OAAA,EAAKC,WAAWL,OAAQG,UAGpB,EAAA,KAAA,aAAA,SAACjC,EAAGC,GAEbD,OAAAA,EAAI,EAAKA,EAAI,EAAKE,EAAI,GACtBF,EAAI,EAAKA,EAAI,EAAKE,EAAI,GACtBD,EAAI,EAAKA,EAAI,EAAKC,EAAI,GACtBD,EAAI,EAAKA,EAAI,EAAKC,EAAI,IAIV,EAAA,KAAA,gBAAA,SAAC8B,GACf,EAAKA,cAAgBA,IAGd,EAAA,KAAA,SAAA,SAAc,GAAXhC,IAAAA,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EACb,EAAKD,EAAIA,EACT,EAAKC,EAAIA,IAGK,EAAA,KAAA,gBAAA,SAAW,GAARC,IAAAA,EAAAA,EAAAA,EACjB,EAAKA,EAAIA,IAGE,EAAA,KAAA,aAAA,SAACwB,GACZ,EAAKA,UAAYA,IA1HZ1B,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EAEJe,KAAAA,gBAAiB,EAEtBV,UAAUC,IAAI4B,iBAAiB,YAAa,KAAK1B,cACjDH,UAAUC,IAAI4B,iBAAiB,UAAW,KAAKzB,eAE/CZ,EAAKsC,mBAAoB,EAEpB/B,KAAAA,KAAOA,EAIPH,KAAAA,WAAaA,EACb6B,KAAAA,eAAgB,EAChBM,KAAAA,UAAW,EACXZ,KAAAA,WAAY,EAIZtB,KAAAA,mBAAqBA,EACrBC,KAAAA,oBAAsBA,EAqH5B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,oBAhEmB,MAAA,WACd,KAAKF,aACPkB,OACKlB,KAAAA,WAAW,CAAED,EAAG,KAAKA,IAC1BuB,WA4DH,EAtJkB1B,GAsJlB,QAAA,QAAA,EAtJkBA,EAAAA,EA2IG,eAAA,WAChBA,OAAAA,EAAKsC,oBAGPtC,EAAKe,sBAAqB,IACnB,KAhJQf,EAAAA,EAoJW,uBAAA,SAACwC,GAC7BxC,EAAKsC,kBAAoBE;;AC9C7B,aAvGA,IAAA,EAAA,EAAA,QAAA,cAuGA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EArGMC,IAAAA,EAAAA,WAC+C,SAAA,EAAA,GAAA,IAAA,EAAA,KAArCxC,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,WAAYO,EAAAA,EAAAA,aAAgB,EAAA,KAAA,GAmB1B,EAAA,KAAA,yBAAA,WACnB,EAAKA,cACP,EAAKA,eAEP,EAAK+B,KAAKC,YAAW,GACrB,EAAKC,KAAKD,YAAW,KAGG,EAAA,KAAA,0BAAA,WACnB,EAAKC,KAAK5B,qBACb,EAAK0B,KAAKC,YAAW,GACrB,EAAKC,KAAKD,YAAW,MA4CZ,EAAA,KAAA,aAAA,WACJ,OAAA,EAAKD,KAAKf,YA1EZiB,KAAAA,KAAO,IAAI5C,EAAJ,QAAS,CAAEC,EAAGA,EAAIE,EAAI,EAAGD,EAAGA,EAAIC,EAAI,EAAGA,EAAG,GAAII,KAAM,MAC3DmC,KAAAA,KAAO,IAAI1C,EAAJ,QAAS,CACnBC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,WAAAA,EACAC,mBAAoB,KAAKwC,uBACzBvC,oBAAqB,KAAKwC,0BAGvBF,KAAAA,KAAKG,eAAc,GAEnBC,KAAAA,YAAa,EACbC,KAAAA,cAAe,EAEftC,KAAAA,aAAeA,EAoFxB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UAlEY,MAAA,WACH+B,KAAAA,KAAKQ,UACN,KAAKD,cACFL,KAAAA,KAAKM,YA+DhB,CAAA,IAAA,OA3DS,MAAA,WACAF,KAAAA,YAAa,EACbG,KAAAA,aAyDT,CAAA,IAAA,SAtDW,MAAA,WACFF,KAAAA,cAAe,EACfG,KAAAA,aAoDT,CAAA,IAAA,WAjDa,MAAA,WACL,KAAKJ,aACFN,KAAAA,KAAKW,OACN,KAAKX,KAAKxB,gBACP0B,KAAAA,KAAKU,OAAO,CACfrD,EAAG,KAAKyC,KAAKzC,EAAI,KAAKyC,KAAKvC,EAAI,EAC/BD,EAAG,KAAKwC,KAAKxC,EAAI,KAAKwC,KAAKvC,EAAI,OA2CzC,CAAA,IAAA,WArCa,MAAA,WACL,KAAK8C,eACFL,KAAAA,KAAKS,OACN,KAAKT,KAAK1B,gBACPwB,KAAAA,KAAKa,cAAc,CACtBpD,EAAG,GAAK,KAAKyC,KAAK3C,EAAI,KAAKyC,KAAKzC,QAgC1C,CAAA,IAAA,cAtBgB,MAAA,WACP2C,KAAAA,KAAKY,sBACLd,KAAAA,KAAKc,wBAoBd,CAAA,IAAA,SAjBW,MAAA,WACA,MAAA,CAAC,KAAKd,KAAKzC,EAAG,KAAKyC,KAAKxC,KAgBnC,CAAA,IAAA,SAbmB,MAAA,SAAA,GAARD,IAAAA,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EACLwC,KAAAA,KAAKY,OAAO,CAAErD,EAAAA,EAAGC,EAAAA,MAY1B,CAAA,IAAA,UATY,MAAA,WACD,OAAA,KAAKwC,KAAKvC,IAQrB,CAAA,IAAA,YALc,MAAA,WACH,OAAA,KAAKuC,KAAKxB,mBAIrB,EArGMuB,GAqGNgB,GAAGC,UAAUjB,OAASA","file":"p5.rnd.js","sourceRoot":"../src","sourcesContent":["export default class DBox {\n  constructor({\n    x,\n    y,\n    s,\n    drawInside,\n    mousePressedInside = () => {},\n    mousePressedOutside = () => {},\n    fill,\n  }) {\n    this.x = x;\n    this.y = y;\n    this.s = s;\n\n    this.isBeingDragged = false;\n\n    _renderer.elt.addEventListener(\"mousedown\", this.mousePressed);\n    _renderer.elt.addEventListener(\"mouseup\", this.mouseReleased);\n\n    DBox.isAnyBeingDragged = false;\n\n    this.fill = fill;\n\n    // Special properties //\n\n    this.drawInside = drawInside;\n    this.isConstrained = false;\n    this.isActive = false;\n    this.isVisible = false;\n\n    // Mouse press events\n\n    this.mousePressedInside = mousePressedInside;\n    this.mousePressedOutside = mousePressedOutside;\n  }\n\n  clearEventListeners = () => {\n    _renderer.elt.removeEventListener(\"mousedown\", this.mousePressed);\n    _renderer.elt.removeEventListener(\"mouseup\", this.mouseReleased);\n  };\n\n  keyPressed = (e) => {\n    if (e.key === \"Delete\") {\n      DBox.setIsAnyBeingDragged(false);\n    }\n  };\n\n  mousePressed = () => {\n    if (this.isMouseInsideBox()) {\n      this.mousePressedInside();\n      if (!DBox.canBeDragged()) {\n        return;\n      }\n      this.isBeingDragged = true;\n    } else {\n      this.mousePressedOutside();\n    }\n  };\n\n  mouseReleased = () => {\n    this.isBeingDragged = false;\n    DBox.setIsAnyBeingDragged(false);\n  };\n\n  display = () => {\n    rectMode(CENTER);\n    stroke(255);\n    push();\n    translate(this.x, this.y);\n    this.drawContentInside();\n    this.drawBox();\n    pop();\n  };\n\n  drawBox = () => {\n    if (this.isVisible) {\n      if (this.fill) {\n        fill(this.fill);\n      } else {\n        noFill();\n      }\n      strokeWeight(2);\n      square(0, 0, this.s);\n    }\n  };\n\n  drawContentInside() {\n    if (this.drawInside) {\n      push()\n      this.drawInside({ s: this.s });\n      pop()\n    }\n  }\n\n  drag = () => {\n    if (this.isBeingDragged) {\n      this.x += mouseX - pmouseX;\n      if (this.isConstrained) {\n        this.y += mouseX - pmouseX;\n      } else {\n        this.y += mouseY - pmouseY;\n      }\n    }\n  };\n\n  isMouseInsideBox = () => {\n    return this.isPtInside(mouseX, mouseY);\n  };\n\n  isPtInside = (x, y) => {\n    return (\n      x < this.x + this.s / 2 &&\n      x > this.x - this.s / 2 &&\n      y < this.y + this.s / 2 &&\n      y > this.y - this.s / 2\n    );\n  };\n\n  setConstraint = (isConstrained) => {\n    this.isConstrained = isConstrained;\n  };\n\n  setPos = ({ x, y }) => {\n    this.x = x;\n    this.y = y;\n  };\n\n  setSideLength = ({ s }) => {\n    this.s = s;\n  };\n\n  setVisible = (isVisible) => {\n    this.isVisible = isVisible;\n  };\n\n  ////////////////////////////////////\n  ///////// Static methods //////////\n  //////////////////////////////////\n\n  static canBeDragged = () => {\n    if (DBox.isAnyBeingDragged) {\n      return false;\n    } else {\n      DBox.setIsAnyBeingDragged(true);\n      return true;\n    }\n  };\n\n  static setIsAnyBeingDragged = (isAnyDragging) => {\n    DBox.isAnyBeingDragged = isAnyDragging;\n  };\n}\n","import DBox from \"./p5.dbox\";\n\nclass RndBox {\n  constructor({ x, y, s, drawInside, mousePressed }) {\n    this.rBox = new DBox({ x: x + s / 2, y: y + s / 2, s: 12, fill: 255 });\n    this.dBox = new DBox({\n      x,\n      y,\n      s,\n      drawInside,\n      mousePressedInside: this.dBoxMousePressedInside,\n      mousePressedOutside: this.dBoxMousePressedOutside,\n    });\n\n    this.rBox.setConstraint(true);\n\n    this.dragCalled = false;\n    this.resizeCalled = false;\n\n    this.mousePressed = mousePressed;\n  }\n\n  dBoxMousePressedInside = () => {\n    if (this.mousePressed) {\n      this.mousePressed();\n    }\n    this.dBox.setVisible(true);\n    this.rBox.setVisible(true);\n  };\n\n  dBoxMousePressedOutside = () => {\n    if (!this.rBox.isMouseInsideBox()) {\n      this.dBox.setVisible(false);\n      this.rBox.setVisible(false);\n    }\n  };\n\n  display() {\n    this.dBox.display();\n    if (this.resizeCalled) {\n      this.rBox.display();\n    }\n  }\n\n  drag() {\n    this.dragCalled = true;\n    this.dragDBox();\n  }\n\n  resize() {\n    this.resizeCalled = true;\n    this.dragRBox();\n  }\n\n  dragDBox() {\n    if (this.dragCalled) {\n      this.dBox.drag();\n      if (this.dBox.isBeingDragged) {\n        this.rBox.setPos({\n          x: this.dBox.x + this.dBox.s / 2,\n          y: this.dBox.y + this.dBox.s / 2,\n        });\n      }\n    }\n  }\n\n  dragRBox() {\n    if (this.resizeCalled) {\n      this.rBox.drag();\n      if (this.rBox.isBeingDragged) {\n        this.dBox.setSideLength({\n          s: 2 * (this.rBox.x - this.dBox.x),\n        });\n      }\n    }\n  }\n\n  isSelected = () => {\n    return this.dBox.isVisible;\n  };\n\n  clearEvents() {\n    this.rBox.clearEventListeners();\n    this.dBox.clearEventListeners();\n  }\n\n  getPos() {\n    return [this.dBox.x, this.dBox.y];\n  }\n\n  setPos({ x, y }) {\n    this.dBox.setPos({ x, y });\n  }\n\n  getSize() {\n    return this.dBox.s;\n  }\n\n  isDragged() {\n    return this.dBox.isBeingDragged;\n  }\n}\n\np5.prototype.RndBox = RndBox;\n"]}